/*
 * Auto-generated by Frida. Please modify to match the signature of QSEECom_send_cmd.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: http://www.frida.re/docs/javascript-api/
 */

{
  /**
   * Called synchronously when about to call QSEECom_send_cmd.
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use Memory.readUtf8String(args[0]) if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */
  onEnter: function (log, args, state) {
    var handle = args[0], buffPtr=args[1], len=args[2].toInt32();
    console.log(handle+" > QSEECom_send_cmd",len);

    if(state.counter == null) 
      state.counter=0;
    else
      state.counter++;

    var TA = null;
    if(state.handles!=null){
      TA = (state.handles["hd-"+handle]!=null)? state.handles["hd-"+handle] : ""+handle;
    }

    var path = "/data/local/tmp/tee_buffers/log_"+TA+"_"+len+"_"+state.counter+".bin";
    var save = new File(path,"w+");
    save.write(Memory.readByteArray(buffPtr,len));
    save.close();

    console.log("Buffer saved in "+path);
    //console.log(hexdump(buffPtr,{offset:0, length: len, header: false, ansi:true}));
  },

  /**
   * Called synchronously when about to return from QSEECom_send_cmd.
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave: function (log, retval, state) {
  }
}
